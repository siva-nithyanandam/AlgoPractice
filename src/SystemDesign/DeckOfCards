/**
 * http://math.hws.edu/eck/cs124/javanotes4/c5/ex-5-5-answer.html
 * https://www.geeksforgeeks.org/design-data-structuresclasses-objectsfor-generic-deck-cards/
 */

enum Suit {
    Spade(1), Clubs(2), Heart(3), Diamonds(4);
}

class Card {
    static int ACE = 1;
    static int JACK = 11;
    static int QUEEN = 12;
    static int KING = 13;

    int val;
    Suit suit;

    Card(int val, Suit suit) {}
    int getVal();
    int getValAsString();
    Suit getSuit();
}

class Deck {
    int cardsUsed;
    Card[] cards = new Card[52];

    Deck() {
        int count = 0;
        for(Suit s : Suits) {
            for (int i = 1; i <= 13; i++) {
                cards[count++] = new Card(i, s);
            }
        }
        cardsUsed = 0;
    }
    shuffle() {
        use Math.random() to get random number and exchange with iteration number;
        cardsUsed = 0;
    }
    int cardsLeft();
    int dealCard() {
        if(cardsUsed == 52) {
            shuffle();
        }
        cardsUsed++;
        return cards[cardsUsed - 1]
    }
}

class Hand {
    List<Card> cards;
    Hand() {
        cards = new ArrayList<>();
    }
    void clear();
    void addCard() {
        cards.add(dealCard());
    }
    void removeCard() {
        cards.remove();
    }
    void removeCard(Card c) {
            cards.remove(c);
    }
    int getCardCount();
    void sortBySuit();
    void sortByValue();
}

class UserHand {
    int blackJackHandValue();
}
class DealerHand {
    int blackJackHandValue();
}

class Blackjack {
    int money;          // Amount of money the user has.
    int bet;            // Amount user bets on a game.
    boolean userWins;   // Did the user win the game?

    static boolean playBlackjack() {
        deck.shuffle();
        dealerHand.addCard( deck.dealCard() );
        dealerHand.addCard( deck.dealCard() );
        userHand.addCard( deck.dealCard() );
        userHand.addCard( deck.dealCard() );
    }
}